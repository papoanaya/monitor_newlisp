#!/usr/bin/env newlisp

;****h* monitor_newlisp/xymonnet-zebra
;
; NAME 
;   xymonnet-zebra
; 
; SYNOPSIS 
;   Monitor utility for trendnet routers that support zebra. 
;   It performs the following tasks:
;   * Connects to the router and authenticates to the zebra port
;   * Gets data from the network interfaces and stores them in file
;   * Gets data from file and delivers network statistics.
;    
; AUTHOR 
;    Luis R. Anaya
; 
; COPYRIGHT 
;    (c) 2012 by Luis R. Anaya
; 
;******




(if (= (env "BBHOME") "")
    (begin
      (println "BBHOME is not set")
					;(exit 1)
    )
)

(if (= (env "BBRDS") "")
    (begin
      (println "BBRDS is not set")
					;(exit 1)
    )
)

(if (not (directory? (env "BBHOME")))
    (begin
      (println "BBHOME is invalid")
      (exit 1)
      )
)



;****** xymonnet-zebra/machine-id
; NOTES
;   Being that this is a pull script, machine id needs
;   to be hard coded
;
; SOURCE


(set 'TESTNAME "zebranet")
(set 'MACHINE "router")

;****

# go to the logs area for simplication of the list

;****f* xymonnet-zebra/get-stat
;
;  NAME 
;    get-stat
;
;  DESCRIPTION
;    Gets router statistics for specific 
;    network interfaces. Right now they are
;    hard coded for the wifi network and the
;    ethernet connection.  It:
;    * Opens a  socket
;    * Sends a password
;    * Sets terminal length to 0, "terminal length 0\n"
;    * Shows interface br0
;    * Shows interface eth2 (1 to 2)
;    * Exits
;
;  INPUTS
;     None
; 
;  OUTPUT
;     Menu executes and an answer is obtained from the user.
;   
;  NOTES 
;     It could be changed to make it more generic.. but it works
; 
;******



(define (get-stat)
  (write-file 
   (append (env "BBTMP") "/" MACHINE ".zebra.out")
   (let (outbuffer "")
     (set 'socket (net-connect "192.168.10.1" 2601))
     (net-receive socket buffer 10000)
     (net-send socket "sekret\r\n\r\n")
     (net-receive socket buffer 10000)
     (net-send socket "terminal length 0\r\n\r\n")
     (net-receive socket buffer 10000)

     (dolist (item '("br0" "eth2" "eth2.2" ))
		   (net-send socket (format "show interface %s\r\n\r\n" item))
		   (net-receive socket buffer 10000)
		   (setq outbuffer (append outbuffer buffer)))

     (setq outbuffer (append outbuffer  "\n"))

     (net-send socket "exit\r\n\r\n")
     (net-close socket)
     outbuffer) )
)



;****f* xymonnet-zebra/analyze-stat
;
;  NAME 
;    analyze-stat
;
;  DESCRIPTION
;    Parses the file containing the interface
;    statistics. It will do the following tasks:
;    * Opens the file
;    * Splits by newline
;    * Gets interface name and statistics.
;    * Shows interface br0
;    * Shows interface eth2 (1 to 2)
;    * Exits
;
;  INPUTS
;     None
; 
;  OUTPUT
;     A list in which each element has the interface name, 
;     input kilobytes, output kilobytes.
;   
;  NOTES 
;     It could be changed to make it more generic.. but it works
; 
;******


(define (analyze-stat)
  (setq buffer (read-file 
		(append (env "BBTMP") "/" MACHINE ".zebra.out")))
  (let ((old-interface-name "")
	(result '()))
    (dolist (line-item (parse buffer "\n"))
	    (cond
	     ((find "Interface " line-item)
	      (begin
		(setq interface-name (nth 1 (parse line-item)))))
	     ((find "input packets" line-item)
	      (begin
		(set 'comma-parse (parse line-item ","))
		(set 'bytes (nth 1 (parse (nth 1 comma-parse))))
		(set 'input-mbytes (/ (int bytes) 1000) )))
	     ((find "output packets" line-item)
	      (begin
		(set 'comma-parse (parse line-item ","))
		(set 'bytes (nth 1 (parse (nth 1 comma-parse))))
		(set 'output-mbytes (/ (int bytes) 1000)) 
		(setq result 
		      (append result 
			      (list (list interface-name input-mbytes output-mbytes))))))
	     ))
    result)
)  


;****** xymonnet-zebra/main
;
;  DESCRIPTION
;    The following operations are done 
;    to guide the collection and delivery
;    of data:
;    * Gets the statistics from the router.
;    * Gets the list of input and output bytes.
;    * Sends the data to Xymon for collection.
;    
;   
;  NOTES 
;     It could be changed to make it more generic.. but it works
; 
;******


(if (= TESTNAME "zebranet")
    (begin
      (get-stat)
      (set 'values (analyze-stat))

#
# COMPUTE DIFFERENCES
#



  (dolist (value-item values)
	  (! (format 
	      (append "%s %s \"data %s.trends\n[zebranet.%s.rrd]\n" 
		      "DS:up:COUNTER:600:0:U %d\n"
		      "DS:down:COUNTER:600:0:U %d\"")
	   (env "BB")
	   (env "BBDISP")
	   MACHINE
	   (nth 0 value-item) 
	   (int (nth 1 value-item))
	   (int (nth 2 value-item))) )) 
  ))

(exit 0)


;****** xymonnet-zebra/configuration
;
;  DESCRIPTION
;     To configure xymon to show these under
;     thrends, the following needs to be configured
;     in $XYMONHOME/etc:
;     * graphs.cfg
;     * xymonserver.cfg
; 
;     Add an entry in graphs.cfg with the following configuration
;     parameters for the graph.
;
;    
;          [zebranet]
;              FNPATTERN ^zebranet.(.+).rrd
;              TITLE Router Traffic Satistics                          
;              YAXIS Kilobytes
;              DEF:in@RRDIDX@=@RRDFN@:up:AVERAGE
;              DEF:out@RRDIDX@=@RRDFN@:down:AVERAGE
;              LINE1:in@RRDIDX@#@COLOR@:@RRDPARAM@ Input               
;              GPRINT:in@RRDIDX@:LAST: %6.1lf (cur) \:
;              GPRINT:in@RRDIDX@:MAX: %6.1lf (max) \:
;              GPRINT:in@RRDIDX@:MIN: %6.1lf (min) \:
;              GPRINT:in@RRDIDX@:AVERAGE: %6.1lf (avg)\n
;              LINE1:out@RRDIDX@#@COLOR@:@RRDPARAM@ Output
;              GPRINT:out@RRDIDX@:LAST: %6.1lf (cur) \:
;              GPRINT:out@RRDIDX@:MAX: %6.1lf (max) \:
;              GPRINT:out@RRDIDX@:MIN: %6.1lf (min) \:
;              GPRINT:out@RRDIDX@:AVERAGE: %6.1lf (avg)\n
;   
;   
;   In xymonserver.cfg, at the end of the TEST2RRD and GRAPHS variables, add
;   "zebranet". This will tell xymon to show the zebranet
;   graphs.
;
;   Add this script under the $XYMONHOME/etc for the server and add an a
;   appropriate entry under $XYMONHOME/tasks.d/ to enable
;   automated execution of this script.
;   
;******

