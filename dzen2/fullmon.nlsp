#!/opt/bin/env newlisp

;****h* dzen_newlisp/fullmon.nlsp
;
; NAME
;   fullmon.nlsp
;
; SYNOPSIS
;    A monitoring script for dzen2.
;    Self contained script that performs some light monitoring
;    functions in a Linux System and sends those monitoring
;    statistics to a dzen2 process.
;
; AUTHOR
;    Luis R. Anaya
;
; COPYRIGHT
;    (c) 2012 by Luis R. Anaya
;
;******

;****v* dzen_newlisp/configuration
;
; DESCRIPTION
;    User configurable parameters
;
; SOURCE
;; = Config =

(define DATE-FORMAT "'%A, %d.%m.%Y %H:%M:%S'")


;; Appareance
;;(define FONT "'-*-profont-*-*-*-*-11-*-*-*-*-*-iso8859'")
(define BACKGROUND-COLOR "\#2c2c32")
(define ALTERNATE-BACKGROUND-COLOR "'#494b4f'")
(define FOREGROUND-COLOR "'grey70'")
(define SEPARATOR "^p(3)^r(3x3)^p(3)")
(define FONT "fixed")


;; Cpu settings
(define CPU-CORES (list 0))

;; Main loop interval in seconds
(define SLEEP-INTERVAL 1)

;; Defines list of mountpoints
;; and drive suffixes to monitor
;; It needs to be configured.

(setq suffix-list '("sd"))
(setq mountpoint-list '("cemnt"))


;******
;****c* dzen_newlisp/signal
;
; DESCRIPTION
;    Signal handling constants
;
; SOURCE
;


(constant 'SIGINT 2)
(constant 'SIGKILL 9)
(constant 'SIGQUIT 3)
(constant 'SIGABRT 6)
(constant 'SIGSTOP 19)
(constant 'SIGTERM 15)

;******


;****f*
;
; NAME
;    ctrlC-handler
;
; DESCRIPTION
;    Signal handler routine for al signals
;    It just terminates execution and closes the program.
;
;******

(define (ctrlC-handler)
  (exit))



(signal SIGINT 'ctrlC-handler)
(signal SIGKILL 'ctrlC-handler)
(signal SIGQUIT 'ctrlC-handler)
(signal SIGABRT 'ctrlC-handler)
(signal SIGSTOP 'ctrlC-handler)
(signal SIGTERM 'ctrlC-handler)



;; Cpu Load
(setq *CPU-STATS* (list (list 0 0 0 0 0)))
(setq *CPU-LOADS* (list 0 0))


(set 'dzen-location (exec "which dzen2"))

(if (= dzen-location '())
    (setq dzen-location "dzen2")
    (begin
      (setq dzen-location (first dzen-location))))


;****f*
;
; NAME
;    get-disk
;
; DESCRIPTION
;    Executes df and gets a list of disk mount
;    points and available space.
;
; INPUTS
;    None
;
; OUTPUT
;   List with df results
;
;
;******

(define (get-disk)
  ;*****
  ; NOTES
  ;   Remove -P if df does not support it.
  ;
  ; SOURCE
  (setq df-results (exec "df -P "))
  ;******

  (map (fn (x)
	 (let ((y (parse x)))
	   (list (nth 0 y) (nth 4 y))))
	 (rest df-results)))

;****f*
;
; NAME
;    get-dbar
;
; DESCRIPTION
;    Runs gdbar to get a graphical representation
;    of a number.
;
;
; INPUTS
;    None
;
; OUTPUT
;   Graphical representation of a number.
;
;
;******

(define (get-dbar fs per)
   (first (exec  (append "echo " per "| gdbar -l " fs))))

;****f*
;
; NAME
;    get-dbar-result
;
; DESCRIPTION
;    Executes get-dbar for all the mountpoints
;    being monitored.
;
; INPUTS
;    mountpoint to be monitored
;
; OUTPUT
;   Graphical representation of mountpoint
;
;
;******


(define (get-dbar-results mountpoint)
  (let ((df-result (get-disk)) )
    (map (fn (x)
	   (if (not (nil? (find mountpoint  (first x))))
	       (get-dbar (last (parse (first x) "/"))  (nth 1 x))))
	 df-result)))

;****f*
;
; NAME
;    get-free
;
; DESCRIPTION
;   Executes free -t and gets the total.
;
; INPUTS
;   Nothing
;
; OUTPUT
;   Gets the last line containing the
;   available memory totals
;
;
;******


(define (get-free)
  ;******
  ; NOTES
  ;   free must have -t available.
  ;
  ; SOURCE
  ;
  (setq free-results (exec "free -t"))
  ;
  ;******
  (parse (last free-results)))


;****f*
;
; NAME
;    get-mem-dbar-result
;
; DESCRIPTION
;    Executes get-dbar for the available memory
;
; INPUTS
;    Nothing
;
; OUTPUT
;   Graphical representation of the available
;   memory.
;
;
;******


(define (get-mem-dbar-results)
  (setq free-result (get-free))
  (get-dbar "MEM:"
  (string (round (mul
		 (div
		  (float (nth 2 free-result))
		  (float (nth 1 free-result))) 100) 0))))




(setq *DATE&TIME* "")

;****f*
;
; NAME
;    update-date&time
;
; DESCRIPTION
;    Updates date and time - not in use
;
; INPUTS
;    Nothing
;
; OUTPUT
;   Updated date and time.
;
; NOTES
;   Probably best by using (date)
;
;******


(define (update-date&time)
  (begin
    (setq *DATE&TIME* (first (exec  (append "date +" DATE-FORMAT ))))))


;****f*
;
; NAME
;    process_exists
;
; DESCRIPTION
;    Checks if a process exists and returns its result
;
; INPUTS
;    Process id (numeric)
;
; OUTPUT
;   True if process is running, false otherwise.
;
;
;******

(define (process_exists the_pid)
  (setq get_process (exec "ps"))
  (not (for-all
   (fn (x)
     (not (= the_pid (first (parse x))) ))
   get_process)))

;****f*
;
; NAME
;    main
;
; DESCRIPTION
;    Main loop. It performs the following tasks:
;    * Spawns dzen2 process in background.
;    * Loops and does the following
;    *   Checks moutnpoint list
;    *   Checks memory
;    *   Checks CPU
;    *   Terminates if dzen2 is not running, otherwise
;    *   Sends data to be presented
;
; INPUTS
;    None
;
; OUTPUT
;   Dzen2 execution with output.
;
;
;******


(define (main)

  (map set '(myin bcout) (pipe))
  (map set '(bcin myout) (pipe))

  (setq dzen-process (format "%s -bg %s -p -ta r -e 'onstart=lower\;button3=exit'"
			    dzen-location
			    BACKGROUND-COLOR))


  (setq pid (process dzen-process bcin 0))

  (while (not nil)
	 (dolist (mountpoint mountpoint-list)
		 (map (fn (x)
			(dolist (suffix suffix-list)
				(if (not (nil? (find suffix x)))
				    (write myout (format "%s " x))) ))
			(get-dbar-results mountpoint)) )

	 (write myout SEPARATOR)
	 (write myout " ")
	 (write myout (get-mem-dbar-results))
	 (write myout " ")
	 (write myout (last  (exec "gcpubar -i 1 -c 5  ")))
	 (write-line myout)
	 (sleep 10000)
	 (if (not (process_exists (string pid)))
	     (throw 0)))
  (destroy pid))

(main)
