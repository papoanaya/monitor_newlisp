#!/opt/bin/env newlisp
;****h* dzen_newlisp/mem.nlsp
;
; NAME 
;    mem.nlsp
; 
; SYNOPSIS 
;    A memory monitoring script for dzen2.
;    Self contained script that performs some light monitoring
;    functions in a Linux System and sends those monitoring
;    statistics to a dzen2 process.
;
; AUTHOR 
;    Luis R. Anaya
; 
; COPYRIGHT 
;    (c) 2012 by Luis R. Anaya
; 
;******

;****v* mem.nlsp/configuration
; 
; DESCRIPTION
;    User configurable parameters
; 
; SOURCE
;; = Config =

;; Appareance
(define FONT "'-*-profont-*-*-*-*-11-*-*-*-*-*-iso8859'")
(define BACKGROUND-COLOR "'#2c2c32'")
(define ALTERNATE-BACKGROUND-COLOR "'#494b4f'")
(define FOREGROUND-COLOR "'grey70'")
(define SEPARATOR "^p(3)^r(3x3)^p(3)")

;*****

(set 'dzen-location (exec "which dzen2"))

(if (= dzen-location '())
    (setq dzen-location "dzen2")
    (begin
      (setq dzen-location (first dzen-location))
      )
)



;****f*
; 
; NAME 
;    get-free
;
; DESCRIPTION
;   Executes free -t and gets the total.
; 
; INPUTS 
;   Nothing
;
; OUTPUT
;   Gets the last line containing the 
;   available memory totals
;   
;   
;******

(define (get-free) 
  (setq free-results (exec "free -t "))
  (parse (last free-results))
 )


;****f*
; 
; NAME 
;    get-dbar
;
; DESCRIPTION
;    Runs gdbar to get a graphical representation
;    of a number.
;    
; 
; INPUTS 
;    None
;
; OUTPUT
;   Graphical representation of a number. 
;   
;   
;******


(define (get-dbar label per)
   (first (exec  (append "echo " per "| gdbar -l " label) ))
)


;****f*
; 
; NAME 
;    get-dbar-result
;
; DESCRIPTION
;    Executes get-dbar for all the memory totals.
; 
; INPUTS 
;    Nothing
;
; OUTPUT
;   Graphical representation of mountpoint
;   
;   
;******


(define (get-dbar-results)
  (setq free-result (get-free))
  (get-dbar "mem" 
  (string (round (mul 
		 (div 
		  (float (nth 3 free-result)) 
		  (float (nth 2 free-result))) 100 ) 0) ) )
)



;****f*
; 
; NAME 
;    process_exists
;
; DESCRIPTION
;    Checks if a process exists and returns its result
; 
; INPUTS 
;    Process id (numeric)
;
; OUTPUT
;   True if process is running, false otherwise.
;  
;   
;******

(define (process_exists the_pid)
  (setq get_process (exec "ps"))
  (not (for-all 
   (fn (x) 
     (not (= the_pid (first (parse x))) ))
   get_process) ) 
)

;****f*
; 
; NAME 
;    main
;
; DESCRIPTION
;    Main loop. It performs the following tasks:
;    * Spawns dzen2 process in background.
;    * Loops and does the following
;    *   Checks memory
;    *   Terminates if dzen2 is not running, otherwise
;    *   Sends data to be presented
; 
; INPUTS 
;    None
;
; OUTPUT
;   Dzen2 execution with output.
;  
;   
;******

(define (main)

  (map set '(myin bcout) (pipe))
  (map set '(bcin myout) (pipe))


  (setq dzen-process (format "%s -bg %s -p -ta r -e 'onstart=lower\;button3=exit'"
			    dzen-location
			    BACKGROUND-COLOR))

  (setq pid (process dzen-process bcin 0))

  (while (not nil) 
	 (write myout (get-dbar-results))
	 (write myout " ")
	 (write myout (last  (exec "gcpubar -i 1 -c 5  ")))
	 (write-line myout)
	 (sleep 10000)
	 (if (not (process_exists (string pid)) )
	     (throw 0)))
  (destroy pid)

)


(main)
